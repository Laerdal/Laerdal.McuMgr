<Project Sdk="Microsoft.NET.Sdk">

    <!-- SHARED -->
    <PropertyGroup>
        <IsHostMachineOSX>$( [System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)) )</IsHostMachineOSX>
        <IsHostMachineLinux>$( [System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)) )</IsHostMachineLinux>
        <IsHostMachineWindows>$( [System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)) )</IsHostMachineWindows>
        <IsHostMachineUnix Condition=" '$(IsHostMachineOSX)' == 'true' OR '$(IsHostMachineLinux)' == 'true' ">true</IsHostMachineUnix>

        <!-- if we are building under osx then we issue a proper full blown build    notice that net8.0-maccatalyst must always be first for the   -->
        <!-- native swift-libs to be build properly so that they will be readymade when/if we add additional builds right afterwards in the future -->
        <TargetFramework Condition=" '$(IsHostMachineOSX)' == 'true' ">net8.0-maccatalyst</TargetFramework>

        <!-- if we are building under a non-osx platform then we issue a dummy build which spawns a dud nuget -->
        <!-- then the mcumgr projects skips its own ios build completely so that is sorted out as well        -->
        <TargetFramework Condition=" '$(IsHostMachineOSX)' == 'false' ">netstandard2.1</TargetFramework>

        <IsMacCatalyst Condition="  $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst' ">true</IsMacCatalyst>

        <IsNet8 Condition="             '$(TargetFramework.ToLower().StartsWith(net8))'  == 'true'  ">true</IsNet8>
        <IsNetX Condition="             '$(IsNet8)' == 'true'                                       ">true</IsNetX>
        <IsNetXMacCatalyst Condition="  '$(IsNetX)' == 'true'  and  '$(IsMacCatalyst)'  ==  'true'  ">true</IsNetXMacCatalyst>

        <ShouldBuildNativeLibraries Condition=" '$(IsNetXMacCatalyst)' == 'true' ">true</ShouldBuildNativeLibraries>

        <!-- this should must be kept in sync between this file and laerdal.mcumgr.csproj    notice that the ordering of the following evaluations is important! -->
        <TargetPlatformVersion       Condition=" '$(IsNetXMacCatalyst)' == 'true'  and  '$(Laerdal_Bindings_MacCatalyst___DotnetTargetPlatformVersion)' != '' ">$(Laerdal_Bindings_MacCatalyst___DotnetTargetPlatformVersion)</TargetPlatformVersion>
        <TargetPlatformVersion       Condition=" '$(IsNetXMacCatalyst)' == 'true'  and  '$(TargetPlatformVersion)' == ''                                      ">17.0</TargetPlatformVersion>
        <SupportedOSPlatformVersion  Condition=" '$(IsNetXMacCatalyst)' == 'true'                                                                             ">13.1</SupportedOSPlatformVersion>

        <!-- setting IsBindingProject to true is vital in order for the btouch tools to actually -->
        <!-- kick in and take the ApiDefinitions.cs and StructsAndEnums.cs files into account    -->
        <IsBindingProject>true</IsBindingProject>
        
        <OutputPath>bin\</OutputPath>
        <OutputType>Library</OutputType>
        <LangVersion>10.0</LangVersion>
        <EnableDefaultCompileItems>false</EnableDefaultCompileItems>

        <NoWarn>$(NoWarn);CS0114;NETSDK1202</NoWarn>

        <NativeFrameworkParentFolderpath>$([System.IO.Path]::Combine($(MSBuildThisFileDirectory), 'Frameworks'))</NativeFrameworkParentFolderpath>
        <NativeFrameworkActualTargetFolderpath>$(NativeFrameworkParentFolderpath)/McuMgrBindingsiOS.framework</NativeFrameworkActualTargetFolderpath>

        <!-- set these explicitly here only for experimentation    as far as cicd is concerned these values should be set in the .yml file of the pipeline                                                                                 -->
        <!-- <Laerdal_Bindings_MacCatalyst___Sdk_Version Condition="        '$(Laerdal_Bindings_MacCatalyst___Sdk_Version)'        == '' ">17.0</Laerdal_Bindings_MacCatalyst___Sdk_Version>                                               -->
        <!-- <Laerdal_Bindings_MacCatalyst___Xcode_Ide_Dev_Path Condition=" '$(Laerdal_Bindings_MacCatalyst___Xcode_Ide_Dev_Path)' == '' ">/Applications/Xcode_15.4.app/Contents/Developer</Laerdal_Bindings_MacCatalyst___Xcode_Ide_Dev_Path>  -->
    </PropertyGroup>

    <PropertyGroup>
        <DebugType>full</DebugType>
        <Optimized>false</Optimized>
        <DebugSymbols>true</DebugSymbols>
        <MtouchExtraArgs>-v -v -v -v</MtouchExtraArgs>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <NoBindingEmbedding>true</NoBindingEmbedding>

        <!-- 1. under net8 we need Optimized=false to be set otherwise release builds cause the resulting apps to crash right upon getting launched in the iphone! -->
    </PropertyGroup>

    <PropertyGroup>
        <PackageId>Laerdal.McuMgr.Bindings.MacCatalyst</PackageId>
        <PackageTags>MAUI;Nordic;McuMgr;Bindings;Mac;MacCatalyst;</PackageTags>
        <PackageProjectUrl>https://github.com/Laerdal/Laerdal.McuMgr</PackageProjectUrl>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageLicenseFile>LICENSE</PackageLicenseFile>
        <PackageDescription>C# bindings around Nordic's McuMgr-related native libs for MacCatalyst.</PackageDescription>

        <PackageIcon Condition="Exists('icon.png')">icon.png</PackageIcon>
        <PackageOutputPath Condition=" '$(PackageOutputPath)' == '' ">../Artifacts</PackageOutputPath>

        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>

        <!-- sourcelink: Include PDB in the built .nupkg -->
        <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
        <AllowedReferenceRelatedFileExtensions>$(AllowedReferenceRelatedFileExtensions);.pdb</AllowedReferenceRelatedFileExtensions>

        <!-- these versions are getting replaced by the build script in one swift pass -->
        <Version>1.0.1177.0</Version>
        <FileVersion>1.0.1177.0</FileVersion>
        <PackageVersion>1.0.1177.0</PackageVersion>
        <AssemblyVersion>1.0.1177.0</AssemblyVersion>

        <Title>$(PackageId)</Title>
        <Summary>McuMgr Bindings for MacCatalyst - MAUI ready</Summary>
        <Description>$(PackageDescription)</Description>
        <Authors>Kyriakos Sidiropoulos, François Raminosona, Laerdal</Authors>
        <Owners>$(Authors)</Owners>
        <Copyright>$(Authors)</Copyright>

        <RepositoryUrl>https://github.com/Laerdal/Laerdal.McuMgr.git</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>

        <IncludeSource>true</IncludeSource>
        <IncludeSymbols>true</IncludeSymbols>

        <!-- see : https://cezarypiatek.github.io/post/managing-output-in-sdk-projects/ -->
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

        <!-- sourcelink: Embed source files that are not tracked by the source control manager to the PDB -->
        <EmbedUntrackedSources>true</EmbedUntrackedSources>

        <!-- warning MSB9004: ManifestResourceWithNoCulture item type is deprecated. Emit EmbeddedResource items instead, with metadata WithCulture='false', Type='Resx', and optional LogicalName. -->
        <MSBuildWarningsAsMessages>$(MSBuildWarningsAsMessages);MSB9004</MSBuildWarningsAsMessages>
    </PropertyGroup>

    <ItemGroup>
        <None Include="icon.png" Pack="true" PackagePath="\" Condition="Exists('icon.png')"/>
        <None Include="../LICENSE" Pack="true" PackagePath="\"/>
        <None Include="../README.md" Pack="true" PackagePath="\"/>
    </ItemGroup>

    <ItemGroup>
        <None Remove="Laerdal.McuMgr.Bindings.MacCatalyst.csproj.DotSettings"/>
        <None Include="../Laerdal.McuMgr.Bindings.MacCatalystAndIos.Native/Laerdal.Mac.CompileAndGenerateFatLibs.sh"/>
    </ItemGroup>

    <ItemGroup Condition=" '$(IsHostMachineOSX)' == 'true' ">
        <ObjcBindingCoreSource Include="iOS\ObjcBinding\Sharpie_Generated\StructsAndEnums.cs"/>
        <ObjcBindingApiDefinition Include="iOS\ObjcBinding\Sharpie_Generated\ApiDefinitions.cs"/>
    </ItemGroup>

    <Target Name="PrintBuildInfo" BeforeTargets="PrepareForBuild">
        <Message Importance="High" Text="OS:                     '$(OS)'                                                     "/>
        <Message Importance="high" Text="IsNet8:                 '$(IsNet8)'                                                 "/>
        <Message Importance="high" Text="IsNetX:                 '$(IsNetX)'                                                 "/>
        <Message Importance="high" Text="IsMacCatalyst:          '$(IsMacCatalyst)'                                          "/>
        <Message Importance="high" Text="                                                                                    "/>
        <Message Importance="High" Text="Platform:               '$(Platform)'                                               "/>
        <Message Importance="High" Text="PackageId:              '$(PackageId)'                                              "/>
        <Message Importance="High" Text="Configuration:          '$(Configuration)'                                          "/>
        <Message Importance="High" Text="PackageVersion:         '$(PackageVersion)'                                         "/>
        <Message Importance="High" Text="TargetFramework:        '$(TargetFramework)'                                        "/>
        <Message Importance="High" Text="DefineConstants:        '$(DefineConstants)'                                        "/>
        <Message Importance="high" Text="MSBuildNodeCount:       '$(MSBuildNodeCount)'                                       "/>
        <Message Importance="high" Text="                                                                                    "/>
        <Message Importance="high" Text="TargetPlatformVersion:                   '$(TargetPlatformVersion)'                 "/>
        <Message Importance="high" Text="SupportedOSPlatformVersion:              '$(SupportedOSPlatformVersion)'            "/>

        <Message Importance="high" Text="NativeFrameworkParentFolderpath:         '$(NativeFrameworkParentFolderpath)'       "/>
        <Message Importance="high" Text="NativeFrameworkActualTargetFolderpath:   '$(NativeFrameworkActualTargetFolderpath)' "/>
    </Target>

    <!-- considering the highly customized nature of the build system we need to ensure that parallelization is turned off otherwise we will end up with   -->
    <!-- cryptic errors in azure due to target-frameworks trying to build themselves in parallel thus stepping onto eachothers toes    thats because the   -->
    <!-- intended way of building stuff is to let net8.0-maccatalyst build the maccatalyst libs and once that is done then and only then proceed to        -->
    <!-- compiling any additional target-framework which will find the compiled framework-libs already in place                                            -->
    <Target Name="EnsureThatParallelizedBuildingIsDisabled"
            BeforeTargets="CompileProxyProjectAndGenerateFatLibs">
        <Error Condition=" '$(MSBuildNodeCount)' != '' and $(MSBuildNodeCount) &gt; 1 "
               Text="Detected that parallelization is turned on (MSBuildNodeCount: $(MSBuildNodeCount) > 1). Refusing to build because parallelized builds are destined to fail with cryptic errors. Turn off parallelization via BuildInParallel=false or /m:1 (see: https://stackoverflow.com/a/76340699/863651)"/>
    </Target>

    <!-- 1  its important to ensure that we only build the native libs once and only once otherwise we will get them build twice in parallel       -->
    <!--                                                                                                                                           -->
    <!-- 2  also note that we hook onto the PrepareForBuild task    if we target the task CoreCompile then this task will be invoked on localdev   -->
    <!--    but on in the azure pipelines for some weird reason                                                                                    -->
    <Target Name="CompileProxyProjectAndGenerateFatLibs"
            BeforeTargets="PrepareForBuild"
            Condition=" '$(ShouldBuildNativeLibraries)' == 'true' and '$(DesignTimeBuild)' != 'true' and '$(BuildingProject)' == 'true' ">
        
        <!-- 1. build and generate the fat libs from the proxy swift project -->
        <Exec WorkingDirectory="../Laerdal.McuMgr.Bindings.MacCatalystAndIos.Native" Command=" bash -c &quot; chmod +x ./Laerdal.Mac.CompileAndGenerateFatLibs.sh &quot; "/>

        <PropertyGroup>
            <_CliCommand>$(_CliCommand)  SUPPORTS_MACCATALYST='YES'                                                    </_CliCommand>
            <_CliCommand>$(_CliCommand)  SWIFT_OUTPUT_PATH='$(NativeFrameworkParentFolderpath)'                        </_CliCommand>
            <_CliCommand>$(_CliCommand)  XCODE_IDE_DEV_PATH='$(Laerdal_Bindings_MacCatalyst___Xcode_Ide_Dev_Path)'     </_CliCommand>
            <_CliCommand>$(_CliCommand)  XCODEBUILD_TARGET_SDK='macosx'                                                </_CliCommand>
            <_CliCommand>$(_CliCommand)  XCODEBUILD_TARGET_SDK_VERSION='$(Laerdal_Bindings_MacCatalyst___Sdk_Version)' </_CliCommand>
            <_CliCommand>$(_CliCommand)  ./Laerdal.Mac.CompileAndGenerateFatLibs.sh                                    </_CliCommand>
        </PropertyGroup>
        
        <Exec WorkingDirectory="../Laerdal.McuMgr.Bindings.MacCatalystAndIos.Native" Command=" $(_CliCommand) "/>

        <!-- warning   its absolutely vital to remove any softlink files as they are causing -->
        <!-- warning   codesign to fail when using the resulting nuget in maui apps   go figure ... -->
        <Exec WorkingDirectory="$(NativeFrameworkParentFolderpath)" Command=" bash -c &quot; find . -type l -ls -delete &quot; "/>

        <!-- remove any .DS_Store files from the .framework folder just be on the safe side -->
        <Exec WorkingDirectory="$(NativeFrameworkParentFolderpath)" Command=" bash -c &quot; find . -name '.DS_Store' -type f -delete &quot; "/>

        <!-- 2. cleanup the previous contents of iOS/ObjcBinding/Sharpie_Generated/ -->
        <PropertyGroup>
            <SharpieTargetFolder>iOS/ObjcBinding/Sharpie_Generated/</SharpieTargetFolder>
        </PropertyGroup>
        
        <ItemGroup>
            <FilesToClean Include="$(SharpieTargetFolder)\**\*"/>
        </ItemGroup>

        <Delete Files="@(FilesToClean)" ContinueOnError="true"/>

        <!-- 3. copy the sharpie-generated files over to the local project structure -->
        <ItemGroup>
            <SharpieGeneratedFiles Include="../Laerdal.McuMgr.Bindings.MacCatalystAndIos.Native/SharpieOutput/SwiftFrameworkProxy.Binding/**"/>
        </ItemGroup>

        <Copy
                SourceFiles="@(SharpieGeneratedFiles)"
                DestinationFolder="$(SharpieTargetFolder)"
        />
    </Target>

    <!-- this is meant to be invoked by the builder script separately and before the main build kicks in -->
    <Target Name="EnsureFrameworkFolderIsCreated">
        <MakeDir Directories="$(NativeFrameworkActualTargetFolderpath)" Condition=" !Exists('$(NativeFrameworkActualTargetFolderpath)') "  />
    </Target>
    
    <Target Name="CreateKeepMeFileUnderFrameworkFolder" AfterTargets="CoreBuild">
        <!-- to future maintainers     we need to keep this dummy file around in order to ensure that the folder Frameworks/McuMgrBindingsiOS.framework -->
        <!-- to future maintainers     will always be automatically created upon git checkout in the azure pipelines  if we dont do this then the azure -->
        <!-- to future maintainers     pipelines will generate a nuget without the Frameworks/McuMgrBindingsiOS.framework folder as a <NativeReference> -->
        <!-- to future maintainers     causing the iOS nuget to be poisoned and cause cryptic errors in runtime about missing symbols etc               -->

        <Touch Files="$(NativeFrameworkActualTargetFolderpath)/.keepme_in_git_otherwise_cicd_pipelines_will_break" AlwaysCreate="true"/>
    </Target>

    <!-- https://learn.microsoft.com/en-us/xamarin/ios/platform/binding-objective-c/walkthrough?tabs=windows#create-a-xamarinios-binding-project -->
    <ItemGroup Condition=" '$(IsHostMachineOSX)' == 'true' ">

        <!-- McuMgrBindingsiOS.framework -->
        <NativeReference Include="Frameworks/McuMgrBindingsiOS.framework">
            <Kind>Framework</Kind>
            <SmartLink>False</SmartLink>
            <Frameworks>Foundation</Frameworks>
        </NativeReference>

    </ItemGroup>

</Project>
