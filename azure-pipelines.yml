trigger:
  branches:
    include:
      - '*'

pool:
  name: Azure Pipelines
  vmImage: 'macOS-12'

variables:
  - group: shared-variables  # needed for the github access token which is used to create new releases in github

resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/develop

jobs:
  - job: Build
    displayName: Build Agent

    steps:
      - checkout: self
        clean: true
        fetchTags: false
        fetchDepth: 0
        persistCredentials: True

      - task: Bash@3
        displayName: Install Build Tools for 'Laerdal.McuMgr.Bindings'
        inputs:
          targetType: inline
          script: >-
            # for macos13
            # wget      https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-13-Ventura.pkg
            # sudo      installer    -verbose    -target /    -pkg MacPorts-2.8.1-13-Ventura.pkg
            
            # for macos12
            # wget   https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-12-Monterey.pkg
            # sudo   installer    -verbose    -target /    -pkg MacPorts-2.8.1-12-Monterey.pkg
            
            # sudo    /opt/local/bin/port   install mono
            # sudo  tar -xjf   /opt/local/var/macports/software/mono/mono-*.tbz2  -C /opt/local/var/macports/software/mono/
            # sudo   sh -c   "echo   '\nexport PATH=\"/opt/local/var/macports/software/mono/opt/local/bin:\$PATH\"\n'   >> ~/.bash_profile"
            
            # echo    "--------------------------------------------------"
            # cat   ~/.bash_profile
            # echo    "--------------------------------------------------"
            
            # source  ~/.bash_profile
            # ------------------- #
            
            brew   install   --cask   objectivesharpie

            brew   install   gradle

            brew   install   java11
            
            # this is handled by the build system
            # echo  -e   '\norg.gradle.java.home=/usr/local/opt/openjdk@11/'   >>   "Laerdal.McuMgr.Bindings.Android/gradle.properties"
            
            echo

            echo    "--------------------------------------------------"

            cat    Laerdal.McuMgr.Bindings.Android/gradle.properties

            echo    "--------------------------------------------------"
            
            # this is vital in order to select the ios 16.1+

            ls  -ld  /Applications/Xcode*
            
            sudo   xcode-select   -s  /Applications/Xcode_14.2.app/Contents/Developer
            
            echo
            
            echo "** Java Version:"

            java               -version
            
            echo
            
            echo "** Javac Version:"

            javac             -version

            echo

            echo "** Gradle Version:"

            gradle           --version
            
            echo
            
            echo "** Sharpie Version:"

            sharpie         --version
            
            echo

            echo "** XcodeBuild Version:"

            xcodebuild   -version
            
            echo

            echo "** Mono:"

            which       mono

            mono        --version
            
            echo

            echo "** MSBuild:"

            which       msbuild

            msbuild   --version
            
            echo

            echo "** Dotnet CLI:"

            which    dotnet

            dotnet   --version
            
            echo

            echo "** mtouch:"

            /Library/Frameworks/Xamarin.iOS.framework/Versions/Current/bin/mtouch  --version

      - task: Bash@3
        displayName: CalculateVersion
        inputs:
          targetType: inline
          filePath: calculateVersion.azure.sh
          script: "#!/bin/bash\n \nif [[ \"$(Build.Reason)\" != \"PullRequest\" ]]; then\n    branch_name=`echo $(Build.SourceBranch) | sed 's/refs\\/heads\\///g'`\nelse\n    branch_name=`echo $(System.PullRequest.SourceBranch) | sed 's/refs\\/heads\\///g'`\nfi\necho \"branch_name=$branch_name\"\n\nmaster_branch=\"master\"\ndevelop_branch=\"develop\"\nfirst_commit=`git rev-list --max-parents=0 HEAD`\necho \"first_commit=$first_commit\"\nmajor=1\nminor=0\npatch=0\nsuffix=\nversion_core=$major.$minor.$patch\nversion_extension=\n \nif [ \"$branch_name\" == \"$master_branch\" ]; then\n    minor=`git rev-list $first_commit..HEAD --count --first-parent --ancestry-path`\nelif [ \"$branch_name\" == \"$develop_branch\" ]; then\n    develop_master_point=`git rev-list origin/$master_branch --merges --before=\\`git show -s --format=%ct HEAD\\` --first-parent --max-count=1`\n    if [ -z $develop_master_point ]; then\n        # has never been merged,\n        develop_master_point=`git merge-base origin/$master_branch HEAD --fork-point`\n    fi\n \n    minor=`git rev-list $first_commit..$develop_master_point --count --first-parent --ancestry-path`\n    patch=`git rev-list $first_commit..HEAD --count --first-parent --ancestry-path --not \\`git rev-list $first_commit..HEAD --before=\\\\\\`git show -s --format=%ct $develop_master_point --first-parent --ancestry-path\\\\\\`\\``\nelse\n    head_develop_point=`git rev-list origin/$develop_branch --merges --before=\\`git show -s --format=%ct HEAD\\` --first-parent --max-count=1`\n    if [ -z $head_develop_point ]; then\n        # has never been merged,\n        head_develop_point=`git merge-base origin/$develop_branch HEAD --fork-point`\n    fi\n \n    develop_master_point=`git rev-list origin/$master_branch --merges --before=\\`git show -s --format=%ct $head_develop_point\\` --first-parent --max-count=1`\n    if [ -z $develop_master_point ]; then\n        # has never been merged,\n        develop_master_point=`git merge-base origin/$master_branch $head_develop_point --fork-point`\n    fi \n    minor=`git rev-list $first_commit..$develop_master_point --count --first-parent --ancestry-path`\n    patch=`git rev-list $first_commit..$head_develop_point --count --first-parent --ancestry-path --not \\`git rev-list $first_commit..$head_develop_point --before=\\\\\\`git show -s --format=%ct $develop_master_point --first-parent --ancestry-path\\\\\\`\\``\n    clean_branch_name=`echo $branch_name | sed 's/\\//-/'`\n \n    suffix=$clean_branch_name\n    version_extension=\"-$suffix.$(Build.BuildId)\"\nfi\n\nversion_core=$major.$minor.$patch\necho \"##vso[task.setvariable variable=version.major;]$major\"\necho \"version.major=$major\"\necho \"##vso[task.setvariable variable=version.minor;]$minor\"\necho \"version.minor=$minor\"\necho \"##vso[task.setvariable variable=version.patch;]$patch\"\necho \"version.patch=$patch\"\necho \"##vso[task.setvariable variable=version.suffix;]$suffix\"\necho \"version.suffix=$suffix\"\necho \"##vso[task.setvariable variable=version.revision;]$(Build.BuildId)\"\necho \"version.revision=$(Build.BuildId)\"\necho \"##vso[task.setvariable variable=version.core;]$version_core\"\necho \"version.core=$version_core\"\necho \"##vso[task.setvariable variable=version.extension;]$version_extension\"\necho \"version.extension=$version_extension\"\necho \"##vso[build.updatebuildnumber]$version_core$version_extension\"\n\nexit 0"

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet '
        inputs:
          checkLatest: true

      - script: mkdir '$(Build.ArtifactStagingDirectory)/Output'
        displayName: 'Create Directory $(Build.ArtifactStagingDirectory)/Output'

      # todo  refactor this task to use our own custom utility-task later on
      - task: NuGetCommand@2
        displayName: NuGet Sources Add
        inputs:
          command: custom
          arguments: sources   Add    -Name LaerdalMedical   -Source    https://pkgs.dev.azure.com/LaerdalMedical/_packaging/LaerdalNuGet/nuget/v3/index.json   -username     $(LAERDAL_COMPONENTS_TEAM_EMAIL)     -password     $(LAERDAL_COMPONENTS_TEAM_NUGET_FEED_ACCESS_TOKEN)

      - task: NuGetCommand@2
        displayName: NuGet Sources Add
        inputs:
          command: custom
          arguments:  sources   Add   -Name     LocalNugets   -Source   "$(Build.ArtifactStagingDirectory)/Output"

      - task: MSBuild@1
        displayName: MSBuild
        inputs:
          solution: Laerdal.McuMgr.Builder.csproj # configuration: Release
          msbuildArguments: '-p:Laerdal_Github_Username="$(Github.ComponentsTeam.Username)"   -p:Laerdal_Github_Access_Token="$(Github.ComponentsTeam.AccessToken)"   -p:Laerdal_Repository="$(Repository.Path)"     -p:Laerdal_Source_Branch="$(Build.SourceBranch)"    -p:PackageOutputPath="$(Build.ArtifactStagingDirectory)/Output/"  '

      - task: Bash@3
        displayName: Print Nugets in 'Output'
        inputs:
          targetType: inline
          script: ls    -l   "$(Build.ArtifactStagingDirectory)/Output/"

      - task: PublishBuildArtifacts@1
        inputs:
          ArtifactName: 'drop'
          PathtoPublish: $(Build.ArtifactStagingDirectory)/Output/*.nupkg
          publishLocation: 'Container'
...
