# to future maintainers   considering that this is an open-source project please be mindful of the fact that this file is PUBLIC
# to future maintainers   so any sensitive pieces of info (tokens, passwords, etc) should be stored in ENCRYPTED Azure DevOps pipeline variables
# to future maintainers
# to future maintainers   in the same vein of thought its important to always keep an eye on the pipelines trigger-settings for PR validation
# to future maintainers   to ensure that PR builds coming from people outside Laerdal fire if and only if a Laerdal dev has explicitly comments
# to future maintainers   on the PR with the following string [build]    if this string is not present the PR build should NOT fire

trigger:
  branches:
    include:
      - '*'
 
pool:
  name: 'Azure Pipelines'
  vmImage: 'macOS-12'

variables:
  - group: shared-variables  # needed for the github access token which is used to create new releases in github
  - name: 'Laerdal_Test_Results_Folderpath'
    value: '$(Build.Repository.LocalPath)/TestResults'

resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/develop

# to future maintainers    its vital to STOP the build from firing on PRs coming from forks because stuff like github usernames and access tokens can be easily
# to future maintainers    leaked by malevolent forkers (who can use a trivial .sh script to upload our secrets somewhere) and that would be a security issue
jobs:

  - job: 'Skip_Build'
    condition: | # notice that (a) we explicitly disable any build coming from forks (b) this condition must be kept right here and not moved to the top of the file
      not(
        and(
          eq(variables['System.PullRequest.IsFork'], 'False'),
          or(
                in(       variables['Build.Reason'],               'PullRequest', 'Manual', 'Schedule', 'BuildCompletion', 'ResourceTrigger'  ),
                in(       variables['Build.SourceBranch'],         'refs/heads/main', 'refs/heads/master', 'refs/heads/develop'               ),
                contains( variables['Build.SourceVersionMessage'], '[build]'                                                                  )
          )
        )
      )
    displayName: "Should we auto-build? ..." 
    steps:
      - checkout: none # keep this   to debug place this below IsFork="${{ variables['System.PullRequest.IsFork'] }}" ** Build.Reason="${{ variables['Build.Reason'] }}" ** SourceBranch="${{ variables['Build.SourceBranch'] }}" ** SourceVersionMessage="${{ variables['Build.SourceVersionMessage'] }}" )
        displayName: '(Skipping checkout completely ...'
      - script: 'echo "##vso[task.complete result=SucceededWithIssues;]Build skipped because this is a PR coming from a fork or because this is from a feature branch in which the latest commit message doesnt contain the keyword [build]"'
        displayName: '(Set Warning-Icon ... )'

  - job: 'Build'
    condition: | # notice that (a) we explicitly disable any build coming from forks (b) this condition must be kept right here and not moved to the top of the file
        and(
            eq(variables['System.PullRequest.IsFork'], 'False'),
            or(
                  in(       variables['Build.Reason'],               'PullRequest', 'Manual', 'Schedule', 'BuildCompletion', 'ResourceTrigger'  ),
                  in(       variables['Build.SourceBranch'],         'refs/heads/main', 'refs/heads/master', 'refs/heads/develop'               ),
                  contains( variables['Build.SourceVersionMessage'], '[build]'                                                                  )
            )
        )
    displayName: 'Build Agent'
    steps:
      - checkout: self
        displayName: 'Checkout'
        clean: true
        fetchTags: false
        fetchDepth: 0
        persistCredentials: True
    
      - task: Bash@3
        displayName: 'Setup Build Environment for "Laerdal.McuMgr.Bindings"'
        inputs:
          targetType: filePath
          filePath: 'Laerdal.SetupBuildEnvironment.sh'
    
      - task: NuGetToolInstaller@1
        displayName: 'Install Nuget'
        inputs:
          checkLatest: true
    
      - script: 'mkdir "$(Build.ArtifactStagingDirectory)/Artifacts"'
        displayName: 'Create Directory "$(Build.ArtifactStagingDirectory)/Artifacts"'
    
      - task: NuGetCommand@2
        displayName: 'NuGet Sources Add (for Classic Xamarin)'
        inputs:
          command: 'custom'
          arguments: ' sources   Add   -Name     LocalNugets   -Source   "$(Build.ArtifactStagingDirectory)/Artifacts" '
    
      - task: DotNetCoreCLI@2
        displayName: 'NuGet Sources Add (for .Net6+)'
        inputs:
          command: 'custom'
          custom: 'nuget'
          arguments: ' add source "$(Build.ArtifactStagingDirectory)/Artifacts" '
    
      # notice that explicitly disabling parallelization via m:1 below is vital because if parallelization is enabled the ios and android
      # builds will fail with cryptic errors due to multiple target-frameworks are involved coupled with the custom build logic for native libs
      - task: DotNetCoreCLI@2
        displayName: 'Build .Net6+ Bindings and McuMgr itself and announce new release in GitHub (if needed)'
        inputs:
          command: 'custom'
          custom: 'msbuild'
          arguments: 'Laerdal.McuMgr.Builder.targets    -m:1   -p:Laerdal_Test_Results_Folderpath="$(Laerdal_Test_Results_Folderpath)"   -p:Laerdal_Github_Username="$(Github.ComponentsTeam.Username)"   -p:Laerdal_Github_Access_Token="$(Github.ComponentsTeam.AccessToken)"   -p:Laerdal_Repository="$(Repository.Path)"     -p:Laerdal_Source_Branch="$(Build.SourceBranch)"    -p:PackageOutputPath="$(Build.ArtifactStagingDirectory)/Artifacts/" '
    
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testRunTitle: 'McuMgr Test Suite (Platform-Agnostic)'
          mergeTestResults: true
          testResultsFiles: |
            $(Laerdal_Test_Results_Folderpath)/**/TEST-*.xml
            $(Laerdal_Test_Results_Folderpath)/**/TEST-*.trx
          testResultsFormat: 'XUnit'
          publishRunAttachments: true
          failTaskOnFailedTests: true
          failTaskOnMissingResultsFile: true
    
      # bare in mind that this task doesnt support wildcards
      - task: PublishBuildArtifacts@1
        inputs:
          ArtifactName: 'drop'
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/Artifacts/'
          publishLocation: 'Container'
