<Project Sdk="Microsoft.NET.Sdk">

    <!-- SHARED -->
    <PropertyGroup>
        <IsOSX>$( [System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)) )</IsOSX>
        <IsLinux>$( [System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)) )</IsLinux>
        <IsWindows>$( [System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)) )</IsWindows>
        <IsUnix Condition=" '$(IsOSX)' == 'true' OR '$(IsLinux)' == 'true' ">true</IsUnix>

        <!-- if we are building under a non-osx platform then we issue a dummy build which spawns a dud nuget -->
        <!-- then the mcumgr projects skips its own ios build completely so that is sorted out as well        -->
        <TargetFrameworks Condition=" '$(IsOSX)' == 'true'  ">$(TargetFrameworks)net8.0-ios;</TargetFrameworks>
        <TargetFrameworks Condition=" '$(IsOSX)' == 'false' ">$(TargetFrameworks)netstandard2.1;</TargetFrameworks>

        <IsIOS Condition="          $([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios' ">true</IsIOS>
        
        <IsNet8 Condition="         '$(TargetFramework.ToLower().StartsWith(net8))' == 'true'   ">true</IsNet8>
        <IsNetX Condition="         '$(IsNet8)'  ==  'true'                                     ">true</IsNetX>
        <IsNetXIos Condition="      '$(IsNetX)'  ==  'true'  and  '$(IsIOS)'  ==  'true'        ">true</IsNetXIos>

        <ShouldBuildNativeLibraries Condition=" '$(IsNet8)' == 'true' ">true</ShouldBuildNativeLibraries>

        <TargetPlatformVersion Condition=" '$(IsNetXIos)'   == 'true' ">11.0</TargetPlatformVersion>

        <DebugType>full</DebugType>
        <Optimized>false</Optimized>
        <OutputPath>bin\</OutputPath>
        <OutputType>Library</OutputType>
        <LangVersion>10.0</LangVersion>
        <DebugSymbols>true</DebugSymbols>
        <EnableDefaultCompileItems>false</EnableDefaultCompileItems>

        <!-- see : https://github.com/xamarin/xamarin-macios/pull/12694    todo    test if we still need this in the dotnet8 era -->
        <NoBindingEmbedding>false</NoBindingEmbedding>

        <NoWarn>$(NoWarn);CS0114;NETSDK1202</NoWarn>

        <NativeFrameworkParentFolderpath>$([System.IO.Path]::Combine($(MSBuildThisFileDirectory), 'Frameworks'))</NativeFrameworkParentFolderpath>
        <NativeFrameworkActualTargetFolderpath>$(NativeFrameworkParentFolderpath)/McuMgrBindingsiOS.framework</NativeFrameworkActualTargetFolderpath>
    </PropertyGroup>

    <PropertyGroup>
        <PackageId>Laerdal.McuMgr.Bindings.iOS</PackageId>
        <PackageTags>MAUI;Nordic;McuMgr;Bindings;iOS;Mac;</PackageTags>
        <PackageProjectUrl>https://github.com/Laerdal/Laerdal.McuMgr</PackageProjectUrl>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageLicenseFile>LICENSE</PackageLicenseFile>
        <PackageDescription>C# bindings around Nordic's McuMgr-related native libs for iOS.</PackageDescription>

        <PackageIcon Condition="Exists('icon.png')">icon.png</PackageIcon>
        <PackageOutputPath Condition=" '$(PackageOutputPath)' == '' ">../Artifacts</PackageOutputPath>

        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>

        <!-- sourcelink: Include PDB in the built .nupkg -->
        <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
        <AllowedReferenceRelatedFileExtensions>$(AllowedReferenceRelatedFileExtensions);.pdb</AllowedReferenceRelatedFileExtensions>

        <!-- these versions are getting replaced by the build script in one swift pass -->
        <Version>1.0.1020.0</Version>
        <FileVersion>1.0.1020.0</FileVersion>
        <PackageVersion>1.0.1020.0</PackageVersion>
        <AssemblyVersion>1.0.1020.0</AssemblyVersion>

        <Title>$(PackageId)</Title>
        <Summary>McuMgr Bindings for iOS - MAUI ready</Summary>
        <Description>$(PackageDescription)</Description>
        <Authors>Kyriakos Sidiropoulos, François Raminosona, Laerdal</Authors>
        <Owners>$(Authors)</Owners>
        <Copyright>$(Authors)</Copyright>

        <RepositoryUrl>https://github.com/Laerdal/Laerdal.McuMgr.git</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>

        <IncludeSource>true</IncludeSource>
        <IncludeSymbols>true</IncludeSymbols>

        <!-- see : https://cezarypiatek.github.io/post/managing-output-in-sdk-projects/ -->
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

        <!-- sourcelink: Embed source files that are not tracked by the source control manager to the PDB -->
        <EmbedUntrackedSources>true</EmbedUntrackedSources>

        <!-- warning MSB9004: ManifestResourceWithNoCulture item type is deprecated. Emit EmbeddedResource items instead, with metadata WithCulture='false', Type='Resx', and optional LogicalName. -->
        <MSBuildWarningsAsMessages>$(MSBuildWarningsAsMessages);MSB9004</MSBuildWarningsAsMessages>
    </PropertyGroup>

    <ItemGroup>
        <None Include="icon.png" Pack="true" PackagePath="\" Condition="Exists('icon.png')"/>
        <None Include="../LICENSE" Pack="true" PackagePath="\"/>
        <None Include="../README.md" Pack="true" PackagePath="\"/>
    </ItemGroup>

    <ItemGroup>
        <None Remove="Laerdal.McuMgr.Bindings.iOS.csproj.DotSettings"/>
        <None Include="../Laerdal.McuMgr.Bindings.MacCatalystAndIos.Native/Laerdal.Mac.CompileAndGenerateFatLibs.sh"/>
    </ItemGroup>

    <PropertyGroup>
        <!-- setting IsBindingProject to true is vital in order for the btouch tools to actually -->
        <!-- kick in and take the ApiDefinitions.cs and StructsAndEnums.cs files into account    -->
        <IsBindingProject>true</IsBindingProject>

        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <MtouchExtraArgs>-v -v -v -v</MtouchExtraArgs>
    </PropertyGroup>

    <ItemGroup Condition=" '$(IsOSX)' == 'true' ">
        <!-- nothing to compile for the time being -->
        <!-- <Compile Include="iOS\*.cs"/> -->
        <!-- <Compile Include="iOS\Specific\*.cs"/> -->

        <ObjcBindingCoreSource Include="iOS\ObjcBinding\Sharpie_Generated\StructsAndEnums.cs"/>
        <ObjcBindingApiDefinition Include="iOS\ObjcBinding\Sharpie_Generated\ApiDefinitions.cs"/>

        <!-- we had to remove the reference to Xamarin.Swift due to a b.ug in xamarin.legacy.sdk -->
        <!-- https://github.com/xamarin/Xamarin.Legacy.Sdk/issues/45#issuecomment-1355886218     -->
        <!-- <PackageReference Condition=" '$(IsXamarinIos)' == 'true' " Include="Xamarin.Swift" Version="1.0.11"/> -->
        <PackageReference Condition=" '$(IsXamarinIos)' == 'true' " Include="Xamarin.iOS.SwiftRuntimeSupport" Version="0.2.1"/>
    </ItemGroup>

    <Target Name="PrintBuildInfo" BeforeTargets="PrepareForBuild">
        <Message Importance="High" Text="OS:                     '$(OS)'               "/>
        <Message Importance="High" Text="Platform:               '$(Platform)'         "/>
        <Message Importance="High" Text="PackageId:              '$(PackageId)'        "/>
        <Message Importance="High" Text="Configuration:          '$(Configuration)'    "/>
        <Message Importance="High" Text="PackageVersion:         '$(PackageVersion)'   "/>
        <Message Importance="High" Text="TargetFramework:        '$(TargetFramework)'  "/>
        <Message Importance="High" Text="DefineConstants:        '$(DefineConstants)'  "/>
        <Message Importance="high" Text="MSBuildNodeCount:       '$(MSBuildNodeCount)' "/>
        
        <Message Importance="high" Text="IsIOS:                  '$(IsIOS)'                    "/>
        <Message Importance="high" Text="IsNet8:                 '$(IsNet8)'                   "/>
        <Message Importance="high" Text="IsNetX:                 '$(IsNetX)'                   "/>
        <Message Importance="high" Text="IsNetXIos:              '$(IsNetXIos)'                "/>
        <Message Importance="high" Text="TargetPlatformVersion:  '$(TargetPlatformVersion)'    "/>

        <Message Importance="high" Text="NativeFrameworkParentFolderpath:         '$(NativeFrameworkParentFolderpath)' "/>
        <Message Importance="high" Text="NativeFrameworkActualTargetFolderpath:   '$(NativeFrameworkActualTargetFolderpath)' "/>
    </Target>

    <!-- considering the highly customized nature of the build system we need to ensure that parallelization is turned off otherwise we will end up with   -->
    <!-- cryptic errors in azure due to target-frameworks trying to build themselves in parallel thus stepping onto eachothers toes    thats because the   -->
    <!-- intended way of building stuff is to let net8.0-ios build the ios libs and once that is done then and only then proceed to any additional target  -->
    <!-- frameworks which will find the compiled framework-libs already in place                                                                           -->
    <Target Name="EnsureThatParallelizedBuildingIsDisabled"
            BeforeTargets="CompileProxyProjectAndGenerateFatLibs">
        <Error Condition=" '$(MSBuildNodeCount)' != '' and $(MSBuildNodeCount) &gt; 1 "
               Text="Detected that parallelization is turned on (MSBuildNodeCount: $(MSBuildNodeCount) > 1). Refusing to build because parallelized builds are destined to fail with cryptic errors. Turn off parallelization via BuildInParallel=false or /m:1 (see: https://stackoverflow.com/a/76340699/863651)"/>
    </Target>

    <!-- 1  its important to ensure that we only build the native libs once and only once otherwise we will get them build twice in parallel       -->
    <!-- 2  also note that we hook onto the PrepareForBuild task    if we target the task CoreCompile then this task will be invoked on localdev   -->
    <!--    but on in the azure pipelines for some weird reason                                                                                    -->
    <Target Name="CompileProxyProjectAndGenerateFatLibs"
            BeforeTargets="PrepareForBuild"
            Condition=" '$(ShouldBuildNativeLibraries)' == 'true' and '$(DesignTimeBuild)' != 'true' and '$(BuildingProject)' == 'true' ">

        <!-- 1. build and generate the fat libs from the proxy swift project -->
        <Exec WorkingDirectory="../Laerdal.McuMgr.Bindings.MacCatalystAndIos.Native" Command=" chmod +x ./Laerdal.Mac.CompileAndGenerateFatLibs.sh "/>
        <Exec WorkingDirectory="../Laerdal.McuMgr.Bindings.MacCatalystAndIos.Native" Command=" SWIFT_OUTPUT_PATH='$(NativeFrameworkParentFolderpath)' XCODEBUILD_TARGET_SDK='iphoneos' ./Laerdal.Mac.CompileAndGenerateFatLibs.sh "/>

        <!-- warning   its absolutely vital to remove any softlink files as they are causing -->
        <!-- warning   codesign to fail when using the resulting nuget in maui apps   go figure ... -->
        <Exec WorkingDirectory="$(NativeFrameworkParentFolderpath)" Command=" bash -c &quot; find . -type l -ls -delete &quot; "/>

        <!-- remove any .DS_Store files from the .framework folder just be on the safe side -->
        <Exec WorkingDirectory="$(NativeFrameworkParentFolderpath)" Command=" bash -c &quot; find . -name '.DS_Store' -type f -delete &quot; "/>

        <!-- 2. cleanup the previous contents of iOS/ObjcBinding/Sharpie_Generated/ -->
        <PropertyGroup>
            <SharpieTargetFolder>iOS/ObjcBinding/Sharpie_Generated/</SharpieTargetFolder>
        </PropertyGroup>

        <ItemGroup>
            <FilesToClean Include="$(SharpieTargetFolder)\**\*"/>
        </ItemGroup>

        <Delete Files="@(FilesToClean)" ContinueOnError="true"/>

        <!-- 3. copy the sharpie-generated files over to the local project structure -->
        <ItemGroup>
            <SharpieGeneratedFiles Include="../Laerdal.McuMgr.Bindings.MacCatalystAndIos.Native/SharpieOutput/SwiftFrameworkProxy.Binding/**"/>
        </ItemGroup>

        <Copy
                SourceFiles="@(SharpieGeneratedFiles)"
                DestinationFolder="$(SharpieTargetFolder)"
        />
    </Target>

    <!-- this is meant to be invoked by the builder script separately and before the main build kicks in -->
    <Target Name="EnsureFrameworkFolderIsCreated">
        <MakeDir Directories="$(NativeFrameworkActualTargetFolderpath)" Condition=" !Exists('$(NativeFrameworkActualTargetFolderpath)') "  />
    </Target>

    <Target Name="CreateKeepMeFileUnderFrameworkFolder" AfterTargets="CoreBuild">
        <!-- to future maintainers     we need to keep this dummy file around in order to ensure that the folder Frameworks/McuMgrBindingsiOS.framework -->
        <!-- to future maintainers     will always be automatically created upon git checkout in the azure pipelines  if we dont do this then the azure -->
        <!-- to future maintainers     pipelines will generate a nuget without the Frameworks/McuMgrBindingsiOS.framework folder as a <NativeReference> -->
        <!-- to future maintainers     causing the iOS nuget to be poisoned and cause cryptic errors in runtime about missing symbols etc               -->

        <Touch Files="$(NativeFrameworkActualTargetFolderpath)/.keepme_in_git_otherwise_azure_pipelines_will_break" AlwaysCreate="true"/>
    </Target>

    <!-- https://learn.microsoft.com/en-us/xamarin/ios/platform/binding-objective-c/walkthrough?tabs=windows#create-a-xamarinios-binding-project -->
    <ItemGroup Condition=" '$(IsOSX)' == 'true' ">

        <!-- McuMgrBindingsiOS.framework -->
        <NativeReference Include="Frameworks/McuMgrBindingsiOS.framework">
            <Kind>Framework</Kind>
            <SmartLink>False</SmartLink>
            <Frameworks>Foundation</Frameworks>
        </NativeReference>

    </ItemGroup>

</Project>
